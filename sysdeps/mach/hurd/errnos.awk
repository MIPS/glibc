# Copyright (C) 1991-2017 Free Software Foundation, Inc.
# This file is part of the GNU C Library.

# The GNU C Library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# The GNU C Library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with the GNU C Library; if not, see
# <http://www.gnu.org/licenses/>.

# errno.texinfo contains lines like:
# @errno{ENOSYS, 123, Function not implemented}

BEGIN {
    print "/* This file generated by errnos.awk.  */";
    print "";
    print "#ifndef _BITS_ERRNO_H";
    print "#define _BITS_ERRNO_H 1";
    print "";
    print "#if !defined _ERRNO_H && !defined _BITS_ERRNO_ENUM_H";
    print "#error \"Never include <bits/errno.h> directly; use <errno.h> instead.\"";
    print "#endif";
    print "";
    print "/* The Hurd uses Mach error system 0x10, currently only subsystem 0. */";
    maxerrno = 0;
    in_mach_errors = "";
    in_math = 0;
    lno = 0;
  }

/^@errno\{/ \
  {
    etext = "";
    for (i = 3; i <= NF; ++i)
      etext = etext " " $i;
    etext = substr(etext, 1, length(etext)-1);

    e = substr($1, 8, length($1)-8);
    errno = substr($2, 1, length($2)-1);
    if (errno ~ /^E[A-Z0-9_]*$/)
      {
	printf ("#define %-30s %-10s /*%s */\n", e, errno, etext);
	next;
      }

    errno = errno + 0;
    if (errno == 0)
      next;
    if (errno > 0x3fff)
      {
	printf("%s:%d: errno value %d too large for the Hurd\n",
	       FILENAME, NR, errno) >> "/dev/stderr";
	exit 1;
      }
    if (errno > maxerrno)
      maxerrno = errno;
    printf ("#define %-30s 0x%08x /*%s */\n",
	    e, 0x40000000 + errno, etext);
    next;
  }

NF == 3 && $1 == "#define" && $2 == "MACH_SEND_IN_PROGRESS" \
  {
    in_mach_errors = FILENAME;
    print "\n/* Errors from <mach/message.h>.  */";
  }
NF == 3 && $1 == "#define" && $2 == "KERN_SUCCESS" \
  {
    in_mach_errors = FILENAME;
    print "\n/* Errors from <mach/kern_return.h>.  */";
    next;
  }

in_mach_errors != "" && $2 == "MACH_IPC_COMPAT" \
  {
    in_mach_errors = "";
  }

in_mach_errors == FILENAME && NF == 3 && $1 == "#define" \
  {
    printf("#define %-30s %s\n", "E" $2, $3);
  }

$1 == "#define" && $2 == "_MACH_MIG_ERRORS_H_" \
  {
    in_mig_errors = 1;
    print "\n/* Errors from <mach/mig_errors.h>.  */";
    next;
  }
in_mig_errors && $1 == "#endif" && $3 == "_MACH_MIG_ERRORS_H_" \
  {
    in_mig_errors = 0;
  }

(in_mig_errors && $1 == "#define" && $3 <= -300) || \
(in_device_errors && $1 == "#define" && /D_/ && NF > 3) \
  {
    comment = "";
    for (i = 4; i <= NF; ++i)
      comment = comment " " $i;
    if ($3 < 0)
	val = "(" $3 ")";
    else
	val = $3;
    printf("#define %-30s %6s%s\n", "E" $2, val, comment);
  }

$1 == "#define" && $2 == "D_SUCCESS" \
  {
    in_device_errors = 1;
    print "\n/* Errors from <device/device_types.h>.  */";
    next;
  }
in_device_errors && $1 == "#endif" \
  {
    in_device_errors = 0;
  }


END {
    print "";
    printf "#define\t_HURD_ERRNOS\t%d\n", maxerrno+1;
    print "";
    print "#endif /* bits/errno.h.  */";
  }
