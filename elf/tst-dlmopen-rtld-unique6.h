static dlmopen_test_spec dltest[] =
  {
   {
    .name = "dlmopen-isolate-unique:1:none--ns1--prep",
    .desc = "dlmopen a DF_GNU_1_UNIQUE dso into NS1 with RTLD_ISOLATE",
    .is_prep_stage = 1,
    .args.dso_path = DSO_UNIQUE,
    .args.ns = LM_ID_NEWLM,
    .args.flags = RTLD_ISOLATE,
    .handle_ns = EXPECTED_NS,
    .free_ns = EXPECTED_NS,
    .handle_type = DSO,
    .preloaded = { },
    .loaded = { [EXPECTED_NS] = DSO|NEW },
   },
   {
    .name = "dlmopen-unique:1:nsX--nsX--FAIL",
    .desc = "dlmopen a DF_GNU_1_UNIQUE dso into NSX when already there",
    .args.dso_path = DSO_UNIQUE,
    .args.ns = EXPECTED_NS,
    .failure = 1,
    .preloaded = { [EXPECTED_NS] = DSO },
   },
   {
    .name = "dlmopen-shared-unique:X:nsX--nsX--FAIL",
    .desc = "dlmopen RTLD_SHARED a DF_GNU_1_UNIQUE dso into NSX when already there",
    .args.dso_path = DSO_UNIQUE,
    .args.ns = EXPECTED_NS,
    .args.flags = RTLD_SHARED,
    .failure = 1,
    .preloaded = { [EXPECTED_NS] = DSO },
   },
   {
    .name = "dlmopen-shared-unique:0:nsX--ns0-nsX",
    .desc = "dlmopen RTLD_SHARED a DF_GNU_1_UNIQUE dso already present in NS X",
    .args.dso_path = DSO_UNIQUE,
    .args.ns = LM_ID_BASE,
    .handle_ns = 0,
    .handle_type = DSO,
    .preloaded = { [EXPECTED_NS] = DSO },
    .loaded = { [0] = DSO|NEW, [EXPECTED_NS] = DSO },
   },
   {
    .name = "dlmopen-shared-unique:X:ns0-nsX--ns0-nsX--FAIL",
    .desc = "dlmopen RTLD_SHARED a DF_GNU_1_UNIQUE dso already in the base NS and NS 1",
    .args.dso_path = DSO_UNIQUE,
    .args.ns = EXPECTED_NS,
    .failure = 1,
    .preloaded = { [0] = DSO, [EXPECTED_NS] = DSO },
   },
  };
